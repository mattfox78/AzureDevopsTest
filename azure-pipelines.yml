# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool: Azure Pipelines

variables:
  imageName: 'pipelines-weatherforcastapi-docker'
  DOCKER_BUILDKIT: 1
  buildConfiguration: 'Release'
  OpenWeatherMapApiKey: $(OpenWeatherMapApiKey)
    
steps:
- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: build
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Run tests'
  inputs:
    command: 'test'
    projects: '**/*.sln'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: Publish
  inputs:
    command: publish
    publishWebProjects: false
    projects: '**/*.csproj'
    arguments: '--configuration release --output $(build.artifactstagingdirectory) /property:PublishWithAspNetCoreTargetManifest=false'
    zipAfterPublish: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'myTestProjectArtifact'
    publishLocation: 'Container'

- task: Docker@2
  displayName: Build and publish image
  inputs:
    containerRegistry: 'azdevopstestweatherapi_serviceConnection'
    repository: $(imageName)
    command: 'buildAndPush'
    Dockerfile: WeatherForecast.Api/Dockerfile